---
import ThemeToggle from "@/components/Theme.astro";
import SelectorLanguage from "@/components/LanguageSelector.astro";

import MenuIcon from "@/assets/icons/menu.svg";

import { getI18N } from "@/i18n/index";
import {
  getLangFromUrl,
  useTranslations,
  useTranslatedPath,
} from "@/i18n/utils";

const { currentLocale } = Astro;
const i18n = getI18N({ currentLocale });

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const navItems = [
  // {
  //   title: i18n.NAV.HOME,
  //   label: "inicio",
  //   url: "/#inicio",
  // },
  {
    title: i18n.NAV.EXPERIENCE,
    label: "experiencia",
    url: "/#experiencia",
  },
  {
    title: i18n.NAV.PROJECTS,
    label: "proyecto",
    url: "/#proyecto",
  },
  {
    title: i18n.NAV.ABOUT_ME,
    label: "sobre-mi",
    url: "/#sobremi",
  },
  {
    title: i18n.NAV.CONTACT,
    label: "contacto",
    url: "/#contacto",
  },
];
---

<header
  id="header-nav"
  class="fixed top-0 z-50 flex items-center justify-center w-full p-1 mx-auto md:p-2"
>
  <nav
    class="flex items-center justify-center gap-4 px-3 font-base text-gray-800 md:gap-4 dark:text-gray-200 rounded-xl"
  >
    {
      navItems.map((item) => (
        <a
          class="relative block px-2 py-2 transition hover:text-blue-500 dark:hover:text-blue-500"
          aria-label={item.label}
          href={item.url}
        >
          {item.title}
        </a>
      ))
    }
  </nav>
  <div
    class="absolute flex items-center justify-center text-gray-600 right-4 gap-x-4 dark:text-gray-200"
  >
    <ThemeToggle />
    <SelectorLanguage />
  </div>
  <a href="#header-menu" class="md:hidden"><MenuIcon /></a>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-500");
            } else {
              item.classList.remove("text-blue-500");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>
